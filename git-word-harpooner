#!/bin/sh


set -eu

VERSION="0.1"
# This is a shell option parser definition for https://github.com/ko1nksm/getoptions
# @getoptions

parser_definition(){
  setup REST help:usage -- "Usage: git-word-harpooner [OPTIONS]...  <WORD> [WORD ...]"
  msg -- "OPTIONS:"
  param GIT_PATH -g --git-path -- "The path of git"
  disp :usage -h --help
  disp VERSION -v --version
}


# @end


# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
GIT_PATH=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ "${REST}" != x ] && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[g]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
        ;;
      -[hv]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        case $2 in --*) set -- "$1" unknown "$2" && REST=x; esac;OPTARG= ;;
    esac
    case $1 in
      '-g'|'--git-path')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        GIT_PATH="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '-v'|'--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: git-word-harpooner [OPTIONS]...  <WORD> [WORD ...]
OPTIONS:
  -g, --git-path GIT_PATH     The path of git
  -h, --help                  
  -v, --version               
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end






parse "$@"
eval "set -- $REST"

# echo "GIT_PATH: $GIT_PATH"
# echo "args: $@"


args=$@

if [ -z "$GIT_PATH" ]; then
  GIT_PATH="git"
fi

eargs=""

abspath_root="$("$GIT_PATH" rev-parse --show-toplevel)/"


for i in $args; do
  eargs="$eargs -e $i "
done


stagedfiles=$("$GIT_PATH" ls-files)


searchpath_groups=""

cnt=0

flag=0

for i in $stagedfiles; do
  if test $cnt -gt 10 ; then
    grep $eargs $searchpath_groups && flag=1; 
    cnt=0
  fi
  searchpath_groups="$searchpath_groups $i"
  cnt=$((cnt+1))
done

if test $cnt -ne 0 ; then
  grep $eargs $searchpath_groups && flag=1;
fi

if test $flag -eq 1 ; then
  exit 1
else
  exit 0
fi
